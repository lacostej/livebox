#!/bin/bash
#
# Script to extract status information from a livebox routeur and format it in a single line, separated by semicolons
#
# Sample: 
#
# 20110424-114802;25.5 dB;46.7 dB;20 dB;11 dB;640 kb/s;3840 kb/s;0;0;9;8;0;83.200.176.162;00:00:54;mardi 31 mars, 01:01:18;00:00:02;mardi 31 mars, 01:00:04;8;2;G992_1_A
#
# IDX, SOURCE, description
#
# 1, TIMESTAMP: 20110419-093701
# 2, MAIN: "Atténuation montante"
# 3, MAIN: "Atténuation descendante"
# 4, MAIN: "Marge au bruit sens montant"
# 5, MAIN: "Marge au bruit descendante"
# 6, MAIN: "Débit montant maximum"
# 7, MAIN: "Débit descendant maximum"
# 8, MAIN: "Puissance dans le sens montant"
# 9, MAIN: "Puissance dans le sens descendant"
# 10, MAIN: "Nombre de paquets reçus"
# 11, MAIN: "Nombre de paquets envoyés"
# 12, MAIN: "Nombre de paquets perdus"
# 13, MAIN: "Adresse IP WAN"
#
# 14, ADSL: "Durée de synchronisation ADSL"
# 15, ADSL: "Dernière connexion PPP"
# 16, ADSL: "Durée de connexion PPP"
# 17, ADSL: "Date de dernière déconnexion PPP"
#
# 18, ADSL_MON: "HEC errors counter"
# 19, ADSL_MON: "CRC errors counter"
# 20, ADSL_MON: adslMode
#
# SOURCES:
# MAIN: $HOST/index.cgi?page=infosys_main&sessionid=...
# ADSL: $HOST/index.cgi?page=infosys_adsl&sessionid=...
# ADSL_MON: telnet $HOST adsl mon. See livebox_telnet_dump script


# default values
HOST=192.168.1.1
SLEEP=10
LOOPS=1
USE_TELNET=on
PASSWORD=admin

file=`readlink -f $0`
dir=`dirname $file`

usage()
{
  name=`basename "$file"`
  cat << EOF
usage: $name [options]

This script displays the adsl statuses for the livebox in a single line

OPTIONS:
   -h      Show this message
   -t      [on/off] Enables/disables logging of telnet information (HEC/CRC errors, adsl mode). Defaults to $USE_TELNET.
   -u      Box url. Defaults to $HOST
   -n      Number of times to display the statuses. Defaults to $LOOPS
   -p      Admin password. Defaults to PASSWORD
   -s      Time to sleep in between. Defaults to $SLEEP. Only useful for n > 1
EOF

}

while getopts “hu:n:s:p:t:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         u)
             HOST=$OPTARG
             ;;
         n)
             LOOPS=$OPTARG
             ;;
         s)
             SLEEP=$OPTARG
             ;;
         t)
             if [[ "$OPTARG" == "on" || "$OPTARG" == "off" ]]; then
               USE_TELNET=$OPTARG
             else
               usage
               exit 1
             fi
             ;;
         p)
             PASSWORD=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

#echo "args $OPTIND $# $*"

if [ $# -ge $OPTIND ]; then
  shift $((OPTIND-1))
  echo "Unnecessary remaining arguments: $*"
  usage
  exit 1
fi

trim() { echo $1; }

# crappy html parsing...
cell_extract() {
  local exp="$1"
  local file="$2"
  cell=`grep -A 1 "$exp" $file | tail -1 | sed 's/.*>\(.*\)<.*/\1/'`
  cell=$(trim "$cell")
}

delete_if_exists() {
  if [ -f $1 ]; then
    rm $1
  fi
}

telnet_dump() {
  local log_dump=`mktemp /tmp/livebox_telnet.XXXXXXXX`
  if [ "$?" -ne "0" ]; then
    echo "mktemp failed"
    exit 1
  fi
  #echo $log_dump
  $dir/livebox_telnet_dump 2>&1 | tr '\r' ' ' > $log_dump
  res=${PIPESTATUS[0]}
  adsl_mode=`grep "adslMode" $log_dump | cut -d ':' -f 2`
  hec=`grep "HEC counter" $log_dump | cut -d ':' -f 2`
  crc=`grep "CRC counter" $log_dump | cut -d ':' -f 2`
  
  delete_if_exists $log_dump
  echo "$hec $crc $adsl_mode"
  return $res
}

display_statuses() {
  local box_url=$HOST
  timeout=2
  local sessionid=`curl --connect-timeout $timeout -s -d "authlogin=admin&authpasswd=$PASSWORD&authaction=login" $box_url | grep 'voip&sessionid=' | sed 's/.*id=\([^\"]*\).*/\1/'`
  local infosys_main="$box_url/index.cgi?page=infosys_main&sessionid=$sessionid"
  local infosys_adsl="$box_url/index.cgi?page=infosys_adsl&sessionid=$sessionid"

  local log_main=`mktemp /tmp/livebox.XXXXXXXX`
  local log_adsl=`mktemp /tmp/livebox.XXXXXXXX`
  if [[ ! -z "$sessionid" ]]; then
    curl --connect-timeout $timeout --silent $infosys_main -o $log_main
    curl --connect-timeout $timeout --silent $infosys_adsl -o $log_adsl
 
    local log=$log_main
    cell_extract "Atténuation montante" $log && car1=$cell
    cell_extract "Atténuation descendante" $log && car2=$cell
    cell_extract "Marge au bruit sens montant" $log && car3=$cell
    cell_extract "Marge au bruit descendante" $log && car4=$cell
    cell_extract "Débit montant maximum" $log && car5=$cell
    cell_extract "Débit descendant maximum" $log && car6=$cell
    cell_extract "Puissance dans le sens montant" $log && car7=$cell
    cell_extract "Puissance dans le sens descendant" $log && car8=$cell
    cell_extract "Nombre de paquets reçus" $log && car9=$cell
    cell_extract "Nombre de paquets envoyés" $log && car10=$cell
    cell_extract "Nombre de paquets perdus" $log && car11=$cell
    cell_extract "Adresse IP WAN" $log && car12=$cell
    delete_if_exists $log_main

    log=$log_adsl
    cell_extract "Durée de synchronisation ADSL" $log && adsl1=$cell
    cell_extract "Dernière connexion PPP" $log && adsl2=$cell
    cell_extract "Durée de connexion PPP" $log && adsl3=$cell
    cell_extract "Date de dernière déconnexion PPP" $log && adsl4=$cell
    delete_if_exists $log_adsl
  
    if [ "$USE_TELNET" == "on" ]; then
      local -a errors=( `telnet_dump` )
    fi
    #echo "${errors[@]}"
  fi

  local now=`date +%Y%m%d-%H%M%S`
  echo "$now;$car1;$car2;$car3;$car4;$car5;$car6;$car7;$car8;$car9;$car10;$car11;$car12;$adsl1;$adsl2;$adsl3;$adsl4;${errors[0]};${errors[1]};${errors[2]}"
}


for i in $(seq 1 1 $LOOPS)
do
  display_statuses
  if [ $i -ne $LOOPS ]; then
    sleep $SLEEP
  fi
done
